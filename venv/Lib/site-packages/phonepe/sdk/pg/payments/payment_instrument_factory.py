from phonepe.sdk.pg.payments.models.request_v1.billing_address import BillingAddress
from phonepe.sdk.pg.payments.models.request_v1.card_payment_instrument import CardPaymentInstrument
from phonepe.sdk.pg.payments.models.request_v1.expiry import Expiry
from phonepe.sdk.pg.payments.models.request_v1.intent_payment_instrument import IntentPaymentInstrument
from phonepe.sdk.pg.payments.models.request_v1.net_banking_payment_instrument import NetBankingPaymentInstrument
from phonepe.sdk.pg.payments.models.request_v1.new_card_details import NewCardDetails
from phonepe.sdk.pg.payments.models.request_v1.pay_page_pay_instrument import PayPagePaymentInstrument
from phonepe.sdk.pg.payments.models.request_v1.saved_card_details import SavedCardDetails
from phonepe.sdk.pg.payments.models.request_v1.saved_card_payment_instrument import SavedCardPaymentInstrument
from phonepe.sdk.pg.payments.models.request_v1.token_details import TokenDetails
from phonepe.sdk.pg.payments.models.request_v1.token_payment_instrument import TokenPaymentInstrument
from phonepe.sdk.pg.payments.models.request_v1.upi_collect_payment_instrument import UpiCollectPaymentInstrument
from phonepe.sdk.pg.payments.models.request_v1.upi_qr_payment_instrument import UpiQrPaymentInstrument


class PaymentInstrumentBuilder:

    @staticmethod
    def build_upi_collect_payment_instrument(vpa: str) -> UpiCollectPaymentInstrument:
        return UpiCollectPaymentInstrument(vpa=vpa)

    @staticmethod
    def build_upi_intent_payment_instrument(target_app: str = None) -> IntentPaymentInstrument:
        return IntentPaymentInstrument(target_app=target_app)

    @staticmethod
    def build_upi_qr_payment_instrument() -> UpiQrPaymentInstrument:
        return UpiQrPaymentInstrument()

    @staticmethod
    def build_saved_card_payment_instrument(auth_mode: str, card_id: str, encrypted_cvv: str,
                                            encryption_key_id: int) -> SavedCardPaymentInstrument:
        return SavedCardPaymentInstrument(auth_mode=auth_mode,
                                          card_details=SavedCardDetails(card_id=card_id, encrypted_cvv=encrypted_cvv,
                                                                        encryption_key_id=encryption_key_id))

    @staticmethod
    def build_card_payment_instrument(auth_mode: str, save_card: bool, encrypted_card_number: str,
                                      encryption_key_id: int, card_holder_name: str, expiry_month: str,
                                      expiry_year: str, encrypted_cvv: str, address_line1: str = None,
                                      address_line2: str = None, address_city: str = None, address_state: str = None,
                                      address_zip: str = None, address_country: str = None) -> CardPaymentInstrument:
        billing_address = BillingAddress(line1=address_line1, line2=address_line2, city=address_city, zip=address_zip,
                                         state=address_state, country=address_country)
        card_details = NewCardDetails(encrypted_card_number=encrypted_card_number, encryption_key_id=encryption_key_id,
                                      card_holder_name=card_holder_name, expiry=Expiry(expiry_month, expiry_year),
                                      encrypted_cvv=encrypted_cvv, billing_address=billing_address)
        return CardPaymentInstrument(save_card=save_card, card_details=card_details, auth_mode=auth_mode)

    @staticmethod
    def build_token_payment_instrument(auth_mode: str, encrypted_cvv: str, cryptogram: str, encrypted_token: str,
                                       encryption_key_id: int, expiry_month: str, expiry_year: str, pan_suffix: str,
                                       card_holder_name: str) -> TokenPaymentInstrument:
        token_details = TokenDetails(encrypted_token=encrypted_token, encryption_key_id=encryption_key_id,
                                     expiry=Expiry(expiry_month, expiry_year), pan_suffix=pan_suffix,
                                     cryptogram=cryptogram, encrypted_cvv=encrypted_cvv, card_holder_name=card_holder_name)
        return TokenPaymentInstrument(auth_mode=auth_mode, token_details=token_details)

    @staticmethod
    def build_pay_page_payment_instrument() -> PayPagePaymentInstrument:
        return PayPagePaymentInstrument()

    @staticmethod
    def build_net_banking_payment_instrument(bank_id: str) -> NetBankingPaymentInstrument:
        return NetBankingPaymentInstrument(bank_id=bank_id)


