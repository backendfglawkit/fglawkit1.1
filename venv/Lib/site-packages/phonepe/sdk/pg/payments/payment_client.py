from copy import deepcopy
from typing import Callable

from phonepe.sdk.pg.common.configs.config_handler import get_pg_url

from phonepe.sdk.pg.common.http_client_modules.api_requestor import ApiRequestor

from phonepe.sdk.pg.payments.payment_transaction_client import PaymentTransactionClient
from phonepe.sdk.pg.phonepe_client import PhonePeClient
from phonepe.sdk.pg.common.events.models.sdk_event import SdkEvent
from phonepe.sdk.pg.common.utils.general_utils import merge_dict
from phonepe.sdk.pg.env import Env
from phonepe.sdk.pg.payments.models.request_v1.pg_pay_request import PgPayRequest
from phonepe.sdk.pg.payments.models.request_v1.refund_request import PgRefundRequest
from phonepe.sdk.pg.payments.models.request_v1.validate_vpa_request import VpaValidateRequest
from phonepe.sdk.pg.payments.models.response_v1.phonepe_response import PhonePeResponse


class PhonePePaymentClient(PhonePeClient):
    """Merchant facing class"""

    def __init__(self, merchant_id: str, salt_key: str, salt_index: int, env: Env = Env.UAT,
                 should_publish_events: bool = True):
        """
        Init python SDK class with merchant-credentials

        Parameters
        ----------
        merchant_id:
            Unique Merchant ID assigned to the merchant by PhonePe
        salt_key:
            The salt key used for secure transactions
        salt_index:
            The index of the salt key
        env:
            The environment to use for PhonePe API requests. It can be set to `Env.UAT` for the UAT (sandbox)
            environment or `Env.PROD` for the production environment. The default value is `Env.UAT`.
        should_publish_events: bool
            When true events are sent to PhonePe providing smoother experience
        """
        super().__init__(merchant_id, salt_key, salt_index, env, should_publish_events)
        self._payment_transaction_client = PaymentTransactionClient(api_request_maker=
                                                                    ApiRequestor(host_url=get_pg_url(env)),
                                                                    merchant_config=self._merchant_config)

    def check_status(self, merchant_transaction_id: str) -> PhonePeResponse:
        """
        Gives the status for the transaction

        Parameters
        ----------
        merchant_transaction_id:
            Merchant transaction id for which status is to be fetched

        Returns
        -------
        PhonePeHttpResponse:
            success: boolean
                A boolean to indicate the success/failure of the request.
            code: String
                Response code explaining reason for status.
                For status SUCCESS, only one possible response code is present - PAYMENT_SUCCESS
            data: PgTransactionStatusResponse
        """
        check_status_event = SdkEvent.build_status_check_event(merchant_transaction_id=merchant_transaction_id,
                                                               merchant_id=self._merchant_config.merchant_id)
        return self._request_via_event(self._payment_transaction_client.check_status, check_status_event,
                                       merchant_transaction_id=merchant_transaction_id)

    def validate_vpa(self, vpa: str) -> PhonePeResponse:
        """
        To check if the given vpa is valid or not

        Parameters
        ----------
        vpa:
            The Virtual Payment Address to validate

        Returns
        -------
        PhonePeHttpResponse:
            success: boolean
                A boolean to indicate the success/failure of the request.
            code: String
                Response code explaining reason for status.
                For status SUCCESS (valid vpa), only one possible response code is present - SUCCESS
            data: VpaValidateResponse
                We get the response when the given VPA is valid.
        Raises
        -------
        ExpectationFailed:
            This exception is raised when VPA is invalid

        """
        vpa_request_data = VpaValidateRequest(vpa=vpa, merchant_id=self._merchant_config.merchant_id).to_dict()
        vpa_event = SdkEvent.build_validate_vpa_event(vpa_request=vpa_request_data)
        return self._request_via_event(self._payment_transaction_client.validate_vpa, vpa_event,
                                       vpa_request=vpa_request_data)

    def get_payment_options(self, include_net_banking_banks_list: bool = False) -> PhonePeResponse:
        """
        Retrieve available payment options

        Parameters
        ----------
        include_net_banking_banks_list:
            If passed as true, Net Banking banks list will be included in the response.

        Returns
        -------
        PhonePeHttpResponse:
            success: boolean
                A boolean to indicate the success/failure of the request.
            code: String
                Response code explaining reason for status.
                For status SUCCESS, only one possible response code is present - SUCCESS
            data: PgOptionsResponse
        """
        payment_options_event = SdkEvent.build_payment_options_event(include_bank_list=include_net_banking_banks_list,
                                                                     merchant_id=self._merchant_config.merchant_id)
        return self._request_via_event(self._payment_transaction_client.payment_options, payment_options_event,
                                       include_net_banking_banks_list=include_net_banking_banks_list)

    def refund(self, merchant_transaction_id: str, original_transaction_id: str, amount: int, callback_url: str = None,
               **kwargs) -> PhonePeResponse:
        """
        Refund transaction

        Parameters
        ----------
        merchant_transaction_id : str
            Unique Refund Transaction ID generated by the merchant.
            This should be different from the transaction ID of the debit transaction. (Required)

        original_transaction_id : str
            Merchant transaction ID of the forward transaction which needs to be reversed. (Required)

        amount : int
            Reversal amount in paise. Up to a maximum of the amount of the original payment transaction. (Required)

        callback_url : str
            The URL where server-to-server callback will be posted. Always POST.
            This callback will be of POST type and will contain the same payload as the Status API Response of the Refund transaction.
            The callback will contain an X-VERIFY header which the merchant should verify.

        Returns
        -------
        PhonePeHttpResponse:
            success: boolean
                A boolean to indicate the success/failure of the request.
            code: String
                Response code explaining reason for status.
                For status SUCCESS, only one possible response code is present - PAYMENT_SUCCESS
            data: PgRefundResponse
        """
        refund_body = PgRefundRequest(merchant_id=self._merchant_config.merchant_id,
                                      merchant_transaction_id=merchant_transaction_id,
                                      original_transaction_id=original_transaction_id,
                                      amount=amount,
                                      callback_url=callback_url).to_dict()
        refund_body = merge_dict(refund_body, kwargs)
        refund_event = SdkEvent.build_refund_event(refund_request_body=refund_body)
        return self._request_via_event(self._payment_transaction_client.refund, refund_event,
                                       refund_request_body=refund_body)

    def pay(self, pg_pay_request: PgPayRequest, **kwargs) -> PhonePeResponse:
        """
        Initiates a payment transaction

        Parameters
        ----------
        pg_pay_request : PgPayRequest
            Request build using Instrument Specific request builders in PgPayRequest

        Returns
        -------
        PhonePeHttpResponse:
            success: boolean
                A boolean to indicate the success/failure of the request.
            code: String
                Response code explaining reason for status.
                For status SUCCESS, only one possible response code is present - PAYMENT_INITIATED
            data: PgPayResponse
        """

        pg_pay_request.merchant_id = self._merchant_config.merchant_id
        pay_request_body = merge_dict(pg_pay_request.to_dict(), kwargs)
        init_event = SdkEvent.build_pay_event(pay_request=pay_request_body)
        return self._request_via_event(self._payment_transaction_client.pay, init_event,
                                       pay_request_body=pay_request_body)

    def _request_via_event(self, transaction_client_function: Callable, function_event: SdkEvent,
                           *transaction_client_function_args, **transaction_client_function_kwargs):
        self._event_handler.push_event(event=SdkEvent.set_init_event_data(deepcopy(function_event)))
        try:
            response = transaction_client_function(*transaction_client_function_args,
                                                   **transaction_client_function_kwargs)
            self._event_handler.push_event(
                event=SdkEvent.set_success_event_data(deepcopy(function_event)))
        except Exception as exception:
            self._event_handler.push_event(
                event=SdkEvent.set_failed_event_data(deepcopy(function_event), exception))
            raise exception
        return response
