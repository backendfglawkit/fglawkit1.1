from phonepe.sdk.pg.common.configs.merchant_config import MerchantConfig
from phonepe.sdk.pg.common.http_client_modules.api_requestor import ApiRequestor
from phonepe.sdk.pg.common.utils.checksum_utils import encode_request_body
from phonepe.sdk.pg.payments import payment_constants
from phonepe.sdk.pg.payments.models.response_v1.check_status_models.pg_transaction_status_response import \
    PgTransactionStatusResponse
from phonepe.sdk.pg.payments.models.response_v1.pay_response_models.pg_pay_response import PgPayResponse
from phonepe.sdk.pg.payments.models.response_v1.payment_options_response_models.pg_options_response import \
    PgOptionsResponse
from phonepe.sdk.pg.payments.models.response_v1.pg_refund_response import PgRefundResponse
from phonepe.sdk.pg.payments.models.response_v1.phonepe_response import PhonePeResponse
from phonepe.sdk.pg.payments.models.response_v1.validate_vpa import VpaValidateResponse
from phonepe.sdk.pg.transaction_client import TransactionClient


class PaymentTransactionClient(TransactionClient):
    """Bundles configs and data required to perform operations"""

    def __init__(self, api_request_maker: ApiRequestor, merchant_config: MerchantConfig):
        super().__init__(api_request_maker=api_request_maker, merchant_config=merchant_config)

    def check_status(self, merchant_transaction_id: str):
        check_status_url = payment_constants.STATUS_API.format(merchant_id=self._merchant_config.merchant_id,
                                                               merchant_transaction_id=merchant_transaction_id)
        response = self._api_request_maker.request(url=check_status_url, method="GET",
                                                   headers=self.get_headers(url=check_status_url))
        return self._to_response_object(response, PgTransactionStatusResponse)

    def payment_options(self, include_net_banking_banks_list: bool):
        payment_options_url = payment_constants.PAYMENT_OPTIONS_API.format(merchant_id=self._merchant_config.merchant_id)
        response = self._api_request_maker.request(url=payment_options_url, method="GET",
                                                   headers=self.get_headers(url=payment_options_url),
                                                   path_params={payment_constants.PAYMENT_OPTIONS_PATH_PARAM:
                                                                include_net_banking_banks_list})
        return self._to_response_object(response, PgOptionsResponse)

    def refund(self, refund_request_body: dict):
        response = self._api_request_maker.request(url=payment_constants.REFUND_API, method="POST",
                                                   headers=self.get_headers(url=payment_constants.REFUND_API,
                                                                            body=refund_request_body),
                                                   data=encode_request_body(refund_request_body))
        return self._to_response_object(response, PgRefundResponse)

    def validate_vpa(self, vpa_request: dict):
        response = self._api_request_maker.request(url=payment_constants.VPA_API, method="POST",
                                                   headers=self.get_headers(url=payment_constants.VPA_API,
                                                                            body=vpa_request),
                                                   data=encode_request_body(vpa_request))
        return self._to_response_object(response, VpaValidateResponse)

    def pay(self, pay_request_body: dict):
        response = self._api_request_maker.request(url=payment_constants.PAY_API, method="POST",
                                                   headers=self.get_headers(url=payment_constants.PAY_API,
                                                                            body=pay_request_body),
                                                   data=encode_request_body(pay_request_body))

        return self._to_response_object(response, PgPayResponse)

    @staticmethod
    def _to_response_object(response: PhonePeResponse, response_data_model):
        response_object = PhonePeResponse.from_dict(response.json())
        if response_object.data:
            response_object.data = response_data_model.from_dict(response_object.data)
        return response_object
