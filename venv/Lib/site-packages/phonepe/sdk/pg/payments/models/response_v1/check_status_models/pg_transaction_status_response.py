from dataclasses import field
from typing import Optional, Dict, Union

from dataclasses_json import dataclass_json, LetterCase
from dataclasses import dataclass

from phonepe.sdk.pg.payments.models.response_v1.check_status_models.card_payment_instrument_response import \
    CardPaymentInstrumentResponse
from phonepe.sdk.pg.payments.models.response_v1.check_status_models.net_banking_payment_instrument_response import \
    NetBankingPaymentInstrumentResponse
from phonepe.sdk.pg.payments.models.response_v1.check_status_models.upi_payment_instrument_response import UPIPaymentInstrumentResponse
from phonepe.sdk.pg.payments.models.response_v1.check_status_models.type import Type


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class PgTransactionStatusResponse:
    merchant_id: Optional[str] = field(default=None)
    merchant_transaction_id: Optional[str] = field(default=None)
    transaction_id: Optional[str] = field(default=None)
    amount: Optional[int] = field(default=None)
    response_code: Optional[str] = field(default=None)
    state: Optional[str] = field(default=None)
    payment_instrument: Optional[
        Union[CardPaymentInstrumentResponse, UPIPaymentInstrumentResponse, NetBankingPaymentInstrumentResponse]] = field(default=None)

    def __post_init__(self):
        instrument_mapper: Dict[dataclass] = {Type.CARD.value: CardPaymentInstrumentResponse,
                                              Type.UPI.value: UPIPaymentInstrumentResponse,
                                              Type.NETBANKING.value: NetBankingPaymentInstrumentResponse}
        if self.payment_instrument and instrument_mapper.get(self.payment_instrument.get("type")):
            instrument_type = instrument_mapper.get(self.payment_instrument.get("type"))
            self.payment_instrument = instrument_type.from_dict(self.payment_instrument)
