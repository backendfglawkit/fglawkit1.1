import json
from abc import ABC

from apscheduler.schedulers.background import BackgroundScheduler

from phonepe.sdk.pg.common.configs.config_handler import get_event_ingestion_url
from phonepe.sdk.pg.common.configs.merchant_config import MerchantConfig
from phonepe.sdk.pg.common.constants import SEND_EVENTS_INTERVAL
from phonepe.sdk.pg.common.events.event_publisher_factory import EventPublisherFactory
from phonepe.sdk.pg.common.events.event_queue_handler import EventQueueHandler
from phonepe.sdk.pg.common.events.models.enums.event_state import EventState
from phonepe.sdk.pg.common.events.models.sdk_event import SdkEvent
from phonepe.sdk.pg.common.exceptions import PhonePeException
from phonepe.sdk.pg.common.http_client_modules.api_requestor import ApiRequestor
from phonepe.sdk.pg.common.utils.checksum_utils import calculate_x_verify_hash
from phonepe.sdk.pg.common.utils.encryption_utils import encrypt_message
from phonepe.sdk.pg.env import Env


class PhonePeClient(ABC):
    """Abstract merchant facing class"""

    def __init__(self, merchant_id: str, salt_key: str, salt_index: int, env: Env = Env.UAT,
                 should_publish_events: bool = True):
        """
        Init python SDK class with merchant-credentials

        Parameters
        ----------
        merchant_id:
            Unique Merchant ID assigned to the merchant by PhonePe
        salt_key:
            The salt key used for secure transactions
        salt_index:
            The index of the salt key
        env:
            The environment to use for PhonePe API requests. It can be set to `Env.UAT` for the UAT (sandbox)
            environment or `Env.PROD` for the production environment. The default value is `Env.UAT`.
        should_publish_events: bool
            When true events are sent to PhonePe providing smoother experience
        """
        self._merchant_config = MerchantConfig(merchant_id=merchant_id, salt_key=salt_key, salt_index=salt_index)
        self._event_handler_factory = EventPublisherFactory(merchant_config=self._merchant_config,
                                                            queue_handler=EventQueueHandler(),
                                                            event_sender=ApiRequestor(
                                                              host_url=get_event_ingestion_url(env)))
        self._event_handler = self._event_handler_factory.get_event_publisher(should_publish_events)
        self._event_handler.push_event(SdkEvent.build_init_client_event(EventState.INIT, merchant_id))
        self._scheduler = BackgroundScheduler()
        self._should_publish_events = should_publish_events
        if should_publish_events:
            self._scheduler.start()
            self._scheduler.add_job(self._event_handler.send_events, "interval", seconds=SEND_EVENTS_INTERVAL)

    def verify_response(self, x_verify: str, response: str) -> bool:
        """
        Validate the response using x_verify field

        Parameters
        ----------
        x_verify: str
            x-verify received by the merchant in the x-verify header of the callback from PhonePe.
        response: str
            Response body of the response received by the merchant in the callback from PhonePe.
        Returns
        -------
        If the response string is the one corresponding to the x_verify header
        """
        response_string = json.loads(response).get("response", None)
        if response_string is None:
            raise PhonePeException(status_code=400,
                                   message="`response` field is None, please send response as: {r\"response\":"
                                           "\"response_data\"}", )

        expected_x_verify = calculate_x_verify_hash(b64=response_string, endpoint="",
                                                    salt_key=self._merchant_config.salt_key,
                                                    salt_index=self._merchant_config.salt_index)
        return expected_x_verify == x_verify

    def encrypt_data(self, data: str, public_key: str) -> str:
        """
        Parameters
        ----------
        data: str
            The data to encrypt. Example, card number or the card cvv
        public_key: str
            The public key provided by PhonePe

        Returns
        -------
        encrypted_data: str
            message encrypted using public_key
        """
        return encrypt_message(message=data, public_key=public_key)

    def __del__(self):
        if self._should_publish_events:
            self._scheduler.shutdown()
