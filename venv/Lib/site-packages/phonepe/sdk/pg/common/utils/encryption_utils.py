from base64 import b64encode

from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA

PEM_HEADER = "-----BEGIN PUBLIC KEY-----"
PEM_FOOTER = "-----END PUBLIC KEY-----"


def _convert_to_public_pem_string(public_key: str) -> str:
    """Builds pem file like structure for given public key"""
    key_text = f"""{PEM_HEADER}\n{public_key}\n{PEM_FOOTER}"""
    return key_text


def encrypt_message(message: str, public_key: str):
    """
    Parameters
    ----------
    message: str
        The data to encrypt. Example, card number or the card cvv
    public_key: str
        The public key provided by PhonePe

    Returns
    -------
    encrypted_data: str
        message encrypted using public_key
    """
    is_pem_file_read = public_key.startswith(PEM_HEADER) and public_key.endswith(PEM_FOOTER)
    formatted_public_key = public_key if is_pem_file_read else _convert_to_public_pem_string(public_key=public_key)
    key = RSA.importKey(formatted_public_key)
    cipher = PKCS1_v1_5.new(key)
    ciphertext = b64encode(cipher.encrypt(bytes(message, "utf-8")))
    return ciphertext.decode()
