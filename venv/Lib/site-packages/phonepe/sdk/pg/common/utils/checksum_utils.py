import base64
import hashlib
import json


def calculate_x_verify_hash(b64, endpoint, salt_key, salt_index):
    to_ascii_string = str(b64) + endpoint + salt_key
    to_sha256_string = to_ascii_string.encode("ascii")
    sha256_string = hashlib.sha256(to_sha256_string).hexdigest()
    return f"{sha256_string}###{salt_index}"


def generate_x_verify_header(body: dict, endpoint: str, salt_key: str, salt_index: int):
    payload_string = dict_to_json_string(data=body)
    base64_payload = base64.b64encode(payload_string.encode("ascii")).decode()
    return calculate_x_verify_hash(base64_payload, endpoint, salt_key, salt_index)


def base64_encode(data: str):
    return base64.b64encode(data.encode("ascii")).decode()


def dict_to_json_string(data: dict):
    return "" if len(data) == 0 else json.dumps(data)


def generate_headers(body: dict, url: str, salt_key: str, salt_index: int):
    headers = {"Content-Type": "application/json",
               "Accept": "application/json",
               "x-verify": generate_x_verify_header(body, url, salt_key, salt_index)}
    return headers


def encode_request_body(body: dict):
    payload_string = dict_to_json_string(body)
    return dict_to_json_string({"request": base64_encode(payload_string)})
