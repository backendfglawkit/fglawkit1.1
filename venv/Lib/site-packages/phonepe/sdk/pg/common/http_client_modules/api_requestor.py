from phonepe.sdk.pg.common.http_client_modules.base_http_command import http_command_maker
from phonepe.sdk.pg.common.exceptions import (BadRequest, ClientError, ConnectError, ResourceGone, ServerError,
                                              UnauthorizedAccess, ForbiddenAccess, ResourceConflict, ResourceInvalid,
                                              ResourceNotFound, ExpectationFailed)
from phonepe.sdk.pg.payments.models.response_v1.phonepe_response import PhonePeResponse


class ApiRequestor:
    """Builds the API request data according to the type of HTTP command"""

    def __init__(self, host_url: str) -> None:
        self._host_url = host_url

    @staticmethod
    def get_complete_url(host_url: str, url: str):
        return f"{host_url}{url}"

    def request(self, url: str, method: str, headers={}, data={}, path_params={}) -> PhonePeResponse:
        """Makes API Request using APIRequestor class"""
        response = http_command_maker.request(method=method, url=ApiRequestor.get_complete_url(self._host_url, url),
                                              headers=headers, data=data, path_params=path_params)
        return ApiRequestor.handle_response(response)

    @staticmethod
    def handle_response(response) -> PhonePeResponse:
        response_code = response.status_code
        code_to_exception = {
            400: BadRequest,
            401: UnauthorizedAccess,
            403: ForbiddenAccess,
            404: ResourceNotFound,
            409: ResourceConflict,
            410: ResourceGone,
            417: ExpectationFailed,
            422: ResourceInvalid,
        }
        if response_code in code_to_exception:
            raise code_to_exception[response_code](response.status_code, response.reason, response)
        if 200 <= response_code <= 299:
            return response
        elif 401 <= response_code <= 499:
            raise ClientError(response.status_code, response.reason, response)
        elif 500 <= response_code <= 599:
            raise ServerError(response.status_code, response.reason, response)
        raise ConnectError(response.status_code, response.reason, response)
