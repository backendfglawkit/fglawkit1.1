import uuid
from dataclasses import field

from phonepe.sdk.pg.common import constants

from phonepe.sdk.pg.common.events.models.base_event import BaseEvent
from phonepe.sdk.pg.common.events.models.enums.event_state import EventState
from phonepe.sdk.pg.common.events.models.enums.event_type import EventType
from phonepe.sdk.pg.common.events.models.enums.flow_type import FlowType
from phonepe.sdk.pg.common.events.models.enums.transaction_type import TransactionType
from time import time_ns

import os

from dataclasses import dataclass
from dataclasses_json import dataclass_json, LetterCase


@dataclass_json(letter_case=LetterCase.CAMEL)
@dataclass
class SdkEvent(BaseEvent):
    transaction_id: str = field(default=None)
    transaction_type: TransactionType = field(default=None)
    merchant_transaction_id: str = field(default=None)
    merchant_id: str = field(default=None)
    amount: str = field(default=None)
    callback_url: str = field(default=None)
    original_transaction_id: str = field(default=None)
    vpa: str = field(default=None)
    include_bank_list: bool = field(default=None)
    instrument_type: str = field(default=None)

    @staticmethod
    def populate_metadata(event_type: EventType):
        return SdkEvent(id=str(uuid.uuid1()),
                        flow_type=FlowType.B2B_PG.value,
                        event_type=event_type.value)

    @staticmethod
    def build_status_check_event(merchant_transaction_id: str, merchant_id: str):
        sdk_event = SdkEvent.populate_metadata(EventType.STATUS_CHECK)
        sdk_event.merchant_transaction_id = merchant_transaction_id
        sdk_event.merchant_id = merchant_id
        return sdk_event

    @staticmethod
    def build_pay_event(pay_request: dict):
        sdk_event = SdkEvent.populate_metadata(EventType.PAY)
        sdk_event.merchant_transaction_id = pay_request.get("merchantTransactionId")
        sdk_event.amount = pay_request.get("amount")
        sdk_event.merchant_id = pay_request.get("merchantId")
        sdk_event.callback_url = pay_request.get("callbackUrl")
        if pay_request.get("paymentInstrument") is not None:
            sdk_event.instrument_type = pay_request.get("paymentInstrument").get("type")
        sdk_event.transactionType = TransactionType.DEBIT
        return sdk_event

    @staticmethod
    def build_refund_event(refund_request_body: dict):
        sdk_event = SdkEvent.populate_metadata(EventType.REFUND)
        sdk_event.merchant_transaction_id = refund_request_body.get("merchantTransactionId")
        sdk_event.amount = refund_request_body.get("amount")
        sdk_event.merchant_id = refund_request_body.get("merchantId")
        sdk_event.callback_url = refund_request_body.get("callbackUrl")
        sdk_event.original_transaction_id = refund_request_body.get("originalTransactionId")
        sdk_event.transaction_type = TransactionType.REVERSAL
        return sdk_event

    @staticmethod
    def build_validate_vpa_event(vpa_request: dict):
        sdk_event = SdkEvent.populate_metadata(EventType.VPA_VALIDATE)
        sdk_event.vpa = vpa_request.get("vpa")
        sdk_event.merchant_id = vpa_request.get("merchantId")
        return sdk_event

    @staticmethod
    def build_payment_options_event(include_bank_list: bool, merchant_id: str):
        sdk_event = SdkEvent.populate_metadata(EventType.PAYMENT_OPTIONS)
        sdk_event.include_bank_list = include_bank_list
        sdk_event.merchant_id = merchant_id
        return sdk_event

    @staticmethod
    def build_init_client_event(event_state: EventState, merchant_id: str):
        sdk_event = SdkEvent.populate_metadata(event_type=EventType.CLIENT_INITIALIZED)
        sdk_event.merchant_id = merchant_id
        sdk_event.event_state = EventState.INIT
        return sdk_event

    @staticmethod
    def set_init_event_data(event: BaseEvent):
        event.event_state = EventState.INIT
        event.time = str(time_ns())
        return event

    @staticmethod
    def set_success_event_data(event: BaseEvent):
        event.event_state = EventState.S2S_CALL_SUCCESS
        event.time = str(time_ns())
        return event

    @staticmethod
    def set_failed_event_data(event: BaseEvent, call_exception: Exception):
        event.event_state = EventState.S2S_CALL_FAILED
        event.code = getattr(call_exception, "code", None)
        event.message = getattr(call_exception, "message", None)
        event.time = str(time_ns())
        return event
