from typing import List

from phonepe.sdk.pg.common.configs.merchant_config import MerchantConfig
from phonepe.sdk.pg.common import constants
from phonepe.sdk.pg.common.events.publisher.abstract_event_publisher import AbstractEventPublisher
from phonepe.sdk.pg.common.events.event_queue_handler import EventQueueHandler
from phonepe.sdk.pg.common.http_client_modules.api_requestor import ApiRequestor
from phonepe.sdk.pg.common.events.models.base_event import BaseEvent

from phonepe.sdk.pg.common.events.models.bulk_event import BulkEvent
from phonepe.sdk.pg.common.utils.checksum_utils import generate_headers, encode_request_body


class EventPublisher(AbstractEventPublisher):
    def __init__(self, merchant_config: MerchantConfig, queue_handler: EventQueueHandler, event_sender: ApiRequestor):
        self.merchant_config = merchant_config
        self.queue_handler: EventQueueHandler = queue_handler
        self.event_sender: ApiRequestor = event_sender

    def create_event_batches(self, max_events_in_batch):
        max_events_in_batch = max(1, max_events_in_batch)
        event_batches = []
        queue_size = self.queue_handler.cur_size()
        cur_batch = []
        for _ in range(queue_size):
            cur_event = self.queue_handler.get()
            if cur_event is None:
                break
            cur_batch.append(cur_event)
            if len(cur_batch) == max_events_in_batch:
                event_batches.append(cur_batch[::])
                cur_batch = []
        if len(cur_batch) != 0:
            event_batches.append(cur_batch[::])
        return event_batches

    def _send_batch_data(self, batch: List):
        bulk_request = BulkEvent(merchant_id=self.merchant_config.merchant_id, events=batch).to_dict()
        try:
            self.event_sender.request(url=constants.EVENT_BULK_ENDPOINT, method="POST",
                                      headers=generate_headers(bulk_request, constants.EVENT_BULK_ENDPOINT,
                                                               self.merchant_config.salt_key,
                                                               self.merchant_config.salt_index),
                                      data=encode_request_body(bulk_request))
        except Exception as e:
            return batch[::]
        return []

    def send_events(self):
        if self.queue_handler.is_empty():
            return
        event_batches = self.create_event_batches(constants.MAX_EVENTS_IN_BATCH)
        for batch in event_batches:
            self._send_batch_data(batch=batch)
        self.queue_handler.write_data_to_queue()

    def push_event(self, event: BaseEvent = None):
        self.queue_handler.put(event)
