import json
from unittest import TestCase
from unittest.mock import patch

import responses
import time

from phonepe.sdk.pg.payments.pay_request_builder import PgPayRequestBuilder

from phonepe.sdk.pg.env import Env
from phonepe.sdk.pg.common.exceptions import PhonePeException
from phonepe.sdk.pg.common.configs.config_handler import get_pg_url, get_event_ingestion_url
from phonepe.sdk.pg.common.constants import EVENT_BULK_ENDPOINT
from phonepe.sdk.pg.payments import payment_constants
from phonepe.sdk.pg.payments.models.request_v1.pay_page_pay_instrument import PayPagePaymentInstrument
from phonepe.sdk.pg.payments.models.response_v1.phonepe_response import PhonePeResponse

from phonepe.sdk.pg.payments.models.response_v1.validate_vpa import VpaValidateResponse
from phonepe.sdk.pg.payments.payment_client import PhonePePaymentClient


class TestPhonepeClient(TestCase):

    # APIs:
    @responses.activate
    def test_check_status(self):
        merchant_id = "merchant_id"
        phonepe_client = PhonePePaymentClient(merchant_id=merchant_id, salt_key="XYZ", salt_index=1)
        merchant_transaction_id = "merchant_transaction_id"

        # prepare expected request
        check_status_url = get_pg_url(Env.UAT) + payment_constants.STATUS_API.format(merchant_id=merchant_id,
                                                                                     merchant_transaction_id=merchant_transaction_id)
        response_data = """{
            "success": false,
            "code": "INTERNAL_SERVER_ERROR",
            "message": "There is an error trying to process your transaction at the moment. Please try again in a while."
        }"""
        responses.add(responses.GET, check_status_url, status=200, body="", json=json.loads(response_data))
        phonepe_client.check_status(merchant_transaction_id=merchant_transaction_id)
        assert len(responses.calls) == 1
        assert responses.assert_call_count(check_status_url, 1) is True

    @responses.activate
    def test_validate_vpa(self):
        merchant_id = "merchant_id"
        phonepe_client = PhonePePaymentClient(merchant_id=merchant_id, salt_key="XYZ", salt_index=1)
        vpa = "test_vpa"
        vpa_request_url = get_pg_url(Env.UAT) + payment_constants.VPA_API
        response_data = """{
                "success": true,
                "code": "SUCCESS",
                "message": "Your request has been successfully completed.",
                "data": {
                    "name": "ABC",
                    "vpa": "9999999999@ybl"
                }
            }
        """
        response_object = PhonePeResponse(success=True, code="SUCCESS",
                                          message="Your request has been successfully completed.",
                                          data=VpaValidateResponse(name="ABC", vpa="9999999999@ybl"))
        responses.add(responses.POST, vpa_request_url, status=200, json=json.loads(response_data))
        actual_response_object = phonepe_client.validate_vpa(vpa)

        assert len(responses.calls) == 1
        assert responses.assert_call_count(vpa_request_url, 1) is True
        assert response_object == actual_response_object
        assert json.loads(response_data) == actual_response_object.to_dict()

    @responses.activate
    def test_payment_options(self):
        merchant_id = "merchant_id"
        phonepe_client = PhonePePaymentClient(merchant_id=merchant_id, salt_key="XYZ", salt_index=1)
        include_net_banking_banks_list = True

        payment_option_url = get_pg_url(Env.UAT) + payment_constants.PAYMENT_OPTIONS_API.format(
            merchant_id=merchant_id) + \
                             f"?includeNetBankingBanksList={include_net_banking_banks_list}"

        response_json = """{
          "success": true,
          "code": "SUCCESS",
          "message": "Your request has been successfully completed.",
          "data": {
            "upiCollect": {
              "apps": null,
              "enabled": true
            },
            "intent": {
              "apps": null,
              "enabled": true
            },
            "cards": {
              "enabled": true
            },
            "netBanking": {
              "enabled": true,
              "popularBanks": [
                {
                  "bankId": "ICIC",
                  "bankName": "ICICI Bank",
                  "bankShortName": "ICICI",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 1
                },
                {
                  "bankId": "KVBL",
                  "bankName": "Karur Vysya Bank",
                  "bankShortName": "Karur",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 2
                },
                {
                  "bankId": "LAVB",
                  "bankName": "Laxmi Vilas Bank",
                  "bankShortName": "Laxmi",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 3
                },
                {
                  "bankId": "SBIN",
                  "bankName": "State Bank Of India",
                  "bankShortName": "SBI",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 0
                }
              ],
              "allBanks": [
                {
                  "bankId": "ICIC",
                  "bankName": "ICICI Bank",
                  "bankShortName": "ICICI",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 1
                },
                {
                  "bankId": "KVBL",
                  "bankName": "Karur Vysya Bank",
                  "bankShortName": "Karur",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 2
                },
                {
                  "bankId": "LAVB",
                  "bankName": "Laxmi Vilas Bank",
                  "bankShortName": "Laxmi",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 3
                },
                {
                  "bankId": "SBIN",
                  "bankName": "State Bank Of India",
                  "bankShortName": "SBI",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 0
                }
              ],
              "topBanks": null,
              "ttl": null
            }
          }
        }"""
        responses.add(responses.GET, payment_option_url, status=200, json=json.loads(response_json))
        response_object = phonepe_client.get_payment_options(include_net_banking_banks_list=include_net_banking_banks_list)

        assert len(responses.calls) == 1
        assert responses.assert_call_count(payment_option_url, 1) is True
        assert json.loads(response_json) == json.loads(json.dumps(response_object.to_dict()))

    @responses.activate
    def test_refund(self):
        merchant_id = "merchant_id"
        merchant_transaction_id = "merchant_transaction_id"
        original_transaction_id = "original_transaction_id"
        amount = 100

        phonepe_client = PhonePePaymentClient(merchant_id=merchant_id, salt_key="XYZ", salt_index=1)
        refund_url = get_pg_url(Env.UAT) + payment_constants.REFUND_API
        response_data = """{
          "success": true,
          "code": "PAYMENT_PENDING",
          "message": "Your request has been successfully completed.",
          "data": {
            "merchantId": "MERCHANTUAT",
            "merchantTransactionId": "ROD620471739210623",
            "transactionId": "TR620471739210623",
            "amount": 10000,
            "state": "PENDING",
            "responseCode": "PAYMENT_PENDING"
          }
        }"""
        responses.add(responses.POST, refund_url, status=200, json=json.loads(response_data))

        response_object = phonepe_client.refund(merchant_transaction_id=merchant_transaction_id,
                                                original_transaction_id=original_transaction_id, amount=amount)

        assert len(responses.calls) == 1
        assert responses.assert_call_count(refund_url, 1) is True
        assert json.loads(response_data) == response_object.to_dict()

    @responses.activate
    def test_pay(self):
        merchant_id = "merchant_id"
        merchant_transaction_id = "merchant_transaction_id"
        amount = 100
        payment_instrument = PayPagePaymentInstrument()
        response_string = """{
                  "success": true,
                  "code": "PAYMENT_INITIATED",
                  "message": "Payment initiated",
                  "data": {
                    "merchantId": "MERCHANTUAT",
                    "merchantTransactionId": "ec6c129e-ee3f-45a5-8ab9-57e0da05205b",
                    "transactionId": null,
                    "instrumentResponse": {
                      "type": "PAY_PAGE",
                      "redirectInfo": {
                        "url": "https://www.phonepe.com/transact/pg?token=working",
                        "method": "GET"
                      }
                    }
                  }
                }"""

        phonepe_client = PhonePePaymentClient(merchant_id=merchant_id, salt_key="XYZ", salt_index=1)
        pay_url = get_pg_url(Env.UAT) + payment_constants.PAY_API
        responses.add(responses.POST, pay_url, status=200, json=json.loads(response_string))
        pay_instrument = PgPayRequestBuilder.build_pay_page_payment_instrument(
            merchant_transaction_id=merchant_transaction_id, amount=amount)
        response_object = phonepe_client.pay(pay_instrument)
        assert len(responses.calls) == 1
        assert responses.assert_call_count(pay_url, 1) is True
        assert json.loads(response_string) == response_object.to_dict()

    @responses.activate
    def test_event_ingestion_failure(self):
        merchant_id = "merchant_id"
        phonepe_client = PhonePePaymentClient(merchant_id=merchant_id, salt_key="XYZ", salt_index=1)
        merchant_transaction_id = "merchant_transaction_id"
        # prepare expected request
        check_status_url = get_pg_url(Env.UAT) + \
                           payment_constants.STATUS_API.format(merchant_id=merchant_id,
                                                               merchant_transaction_id=merchant_transaction_id)
        responses.add(responses.GET, check_status_url, status=200, body="", json={})
        event_url = get_event_ingestion_url(Env.UAT) + EVENT_BULK_ENDPOINT
        responses.add(responses.POST, url=event_url, status=404)
        phonepe_client._event_handler.queue_handler.clear_queue()
        phonepe_client.check_status(merchant_transaction_id=merchant_transaction_id)

        assert responses.assert_call_count(check_status_url, 1) is True

    @responses.activate
    def test_event_ingestion_off(self):
        merchant_id = "merchant_id"
        phonepe_client = PhonePePaymentClient(merchant_id=merchant_id, salt_key="XYZ", salt_index=1,
                                              should_publish_events=False)
        merchant_transaction_id = "merchant_transaction_id"
        check_status_url = get_pg_url(Env.UAT) + payment_constants.STATUS_API.format(merchant_id=merchant_id,
                                                                                     merchant_transaction_id=merchant_transaction_id)
        responses.add(responses.GET, check_status_url, status=200, body="", json={})
        event_url = get_event_ingestion_url(Env.UAT) + EVENT_BULK_ENDPOINT
        responses.add(responses.POST, url=event_url, status=404)
        phonepe_client.check_status(merchant_transaction_id=merchant_transaction_id)
        phonepe_client.check_status(merchant_transaction_id=merchant_transaction_id)

        # there should be only 2 events instead of 4
        assert responses.assert_call_count(check_status_url, 2) is True

    def test_call_back_valid(self):
        merchant_id = "Phonepe"
        salt_key = "f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454"
        salt_index = 1
        sdk_client = PhonePePaymentClient(merchant_id, salt_key, salt_index)
        response = "{\n" + "  \"response\": \"eyJzdWNjZXNzIjpmYWxzZSwiY29kZSI6IlBBWU1FTlRfRVJST1IiLCJtZXNzYWdlIjoiUGF5bWVudCBGYWlsZWQiLCJkYXRhIjp7Im1lcmNoYW50SWQiOiJTV0lHR1k4IiwibWVyY2hhbnRUcmFuc2FjdGlvbklkIjoiMTIzSmFnb3RhMTIzIiwidHJhbnNhY3Rpb25JZCI6bnVsbCwiYW1vdW50IjoxMDAsInN0YXRlIjoiRkFJTEVEIiwicmVzcG9uc2VDb2RlIjoiVFhOX0FVVE9fRkFJTEVEIiwicGF5bWVudEluc3RydW1lbnQiOm51bGx9fQ==\"\n" + "}"
        x_verify = "01c5915f77870ec01594c6878a226db5f33d80135a75521fbaf393fefe2f0ad3###1"
        value = sdk_client.verify_response(x_verify, response)
        assert value is True

    def test_call_back_invalid(self):
        merchant_id = "Phonepe"
        salt_key = "f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454"
        salt_index = 1
        sdk_client = PhonePePaymentClient(merchant_id, salt_key, salt_index)
        response = "{\n" + "  \"response\": \"1__eyJzdWNjZXNzIjpmYWxzZSwiY29kZSI6IlBBWU1FTlRfRVJST1IiLCJtZXNzYWdlIjoiUGF5bWVudCBGYWlsZWQiLCJkYXRhIjp7Im1lcmNoYW50SWQiOiJTV0lHR1k4IiwibWVyY2hhbnRUcmFuc2FjdGlvbklkIjoiMTIzSmFnb3RhMTIzIiwidHJhbnNhY3Rpb25JZCI6bnVsbCwiYW1vdW50IjoxMDAsInN0YXRlIjoiRkFJTEVEIiwicmVzcG9uc2VDb2RlIjoiVFhOX0FVVE9fRkFJTEVEIiwicGF5bWVudEluc3RydW1lbnQiOm51bGx9fQ==\"\n" + "}"
        x_verify = "01c5915f77870ec01594c6878a226db5f33d80135a75521fbaf393fefe2f0ad3###1"
        value = sdk_client.verify_response(x_verify, response)
        assert value is False

    def test_call_back_exception(self):
        merchant_id = "Phonepe"
        salt_key = "f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454"
        salt_index = 1
        sdk_client = PhonePePaymentClient(merchant_id, salt_key, salt_index)
        response = "{\n" + "  \"response__\": \"eyJzdWNjZXNzIjpmYWxzZSwiY29kZSI6IlBBWU1FTlRfRVJST1IiLCJtZXNzYWdlIjoiUGF5bWVudCBGYWlsZWQiLCJkYXRhIjp7Im1lcmNoYW50SWQiOiJTV0lHR1k4IiwibWVyY2hhbnRUcmFuc2FjdGlvbklkIjoiMTIzSmFnb3RhMTIzIiwidHJhbnNhY3Rpb25JZCI6bnVsbCwiYW1vdW50IjoxMDAsInN0YXRlIjoiRkFJTEVEIiwicmVzcG9uc2VDb2RlIjoiVFhOX0FVVE9fRkFJTEVEIiwicGF5bWVudEluc3RydW1lbnQiOm51bGx9fQ==\"\n" + "}"
        x_verify = "01c5915f77870ec01594c6878a226db5f33d80135a75521fbaf393fefe2f0ad3###1"
        with self.assertRaises(PhonePeException) as exception_raises_context:
            sdk_client.verify_response(x_verify, response)

        exception = exception_raises_context.exception
        assert exception.code == 400
        assert exception.message == "`response` field is None, please send response as: {r\"response\":\"response_data\"}"

    @responses.activate
    @patch("phonepe.sdk.pg.phonepe_client.SEND_EVENTS_INTERVAL", 0.1)
    @patch("phonepe.sdk.pg.common.events.publisher.event_publisher.constants.MAX_EVENTS_IN_BATCH", 100)
    def test_scheduler_sending_events(self):
        merchant_id = "merchant_id"
        phonepe_client = PhonePePaymentClient(merchant_id=merchant_id, salt_key="XYZ", salt_index=1)
        merchant_transaction_id = "merchant_transaction_id"
        # prepare expected request
        check_status_url = get_pg_url(Env.UAT) + payment_constants.STATUS_API.format(merchant_id=merchant_id,
                                                                                     merchant_transaction_id=merchant_transaction_id)
        response_data = """{
                    "success": false,
                    "code": "INTERNAL_SERVER_ERROR",
                    "message": "There is an error trying to process your transaction at the moment. Please try again in a while."
                }"""
        responses.add(responses.GET, check_status_url, status=200, body="", json=json.loads(response_data))
        event_url = get_event_ingestion_url(Env.UAT) + EVENT_BULK_ENDPOINT
        responses.add(responses.POST, url=event_url, status=200)
        phonepe_client.check_status(merchant_transaction_id=merchant_transaction_id)
        time.sleep(0.3)
        assert responses.assert_call_count(check_status_url, 1) is True
        assert responses.assert_call_count(event_url, 1) is True  # client init, request init, success/fail request

    @responses.activate
    @patch("phonepe.sdk.pg.phonepe_client.SEND_EVENTS_INTERVAL", 0.1)
    @patch("phonepe.sdk.pg.common.events.publisher.event_publisher.constants.MAX_EVENTS_IN_BATCH", 100)
    def test_scheduler_not_sending_events(self):
        merchant_id = "merchant_id"
        phonepe_client = PhonePePaymentClient(merchant_id=merchant_id, salt_key="XYZ", salt_index=1,
                                              should_publish_events=False)
        merchant_transaction_id = "merchant_transaction_id"
        # prepare expected request
        check_status_url = get_pg_url(Env.UAT) + payment_constants.STATUS_API.format(merchant_id=merchant_id,
                                                                                     merchant_transaction_id=merchant_transaction_id)
        response_data = """{
                        "success": false,
                        "code": "INTERNAL_SERVER_ERROR",
                        "message": "There is an error trying to process your transaction at the moment. Please try again in a while."
                    }"""
        responses.add(responses.GET, check_status_url, status=200, body="", json=json.loads(response_data))
        event_url = get_event_ingestion_url(Env.UAT) + EVENT_BULK_ENDPOINT
        responses.add(responses.POST, url=event_url, status=200)
        phonepe_client.check_status(merchant_transaction_id=merchant_transaction_id)
        time.sleep(0.3)
        assert responses.assert_call_count(check_status_url, 1) is True
        assert responses.assert_call_count(event_url, 0) is True  # client init, request init, success/fail request
