import json
from unittest import TestCase

import responses

from phonepe.sdk.pg.common.configs.config_handler import get_pg_url
from phonepe.sdk.pg.common.configs.merchant_config import MerchantConfig
from phonepe.sdk.pg.env import Env
from phonepe.sdk.pg.common.http_client_modules.api_requestor import ApiRequestor
from phonepe.sdk.pg.payments.payment_constants import PAYMENT_OPTIONS_API, PAYMENT_OPTIONS_PATH_PARAM
from phonepe.sdk.pg.payments.payment_transaction_client import PaymentTransactionClient


class PaymentOptionsTest(TestCase):

    @responses.activate
    def test_success_include_bank_list(self):
        response_string = """{
          "success": true,
          "code": "SUCCESS",
          "message": "Your request has been successfully completed.",
          "data": {
            "upiCollect": {
              "apps": null,
              "enabled": true
            },
            "intent": {
              "apps": null,
              "enabled": true
            },
            "cards": {
              "enabled": true
            },
            "netBanking": {
              "enabled": true,
              "popularBanks": [
                {
                  "bankId": "ICIC",
                  "bankName": "ICICI Bank",
                  "bankShortName": "ICICI",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 1
                },
                {
                  "bankId": "KVBL",
                  "bankName": "Karur Vysya Bank",
                  "bankShortName": "Karur",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 2
                },
                {
                  "bankId": "LAVB",
                  "bankName": "Laxmi Vilas Bank",
                  "bankShortName": "Laxmi",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 3
                },
                {
                  "bankId": "SBIN",
                  "bankName": "State Bank Of India",
                  "bankShortName": "SBI",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 0
                }
              ],
              "allBanks": [
                {
                  "bankId": "ICIC",
                  "bankName": "ICICI Bank",
                  "bankShortName": "ICICI",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 1
                },
                {
                  "bankId": "KVBL",
                  "bankName": "Karur Vysya Bank",
                  "bankShortName": "Karur",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 2
                },
                {
                  "bankId": "LAVB",
                  "bankName": "Laxmi Vilas Bank",
                  "bankShortName": "Laxmi",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 3
                },
                {
                  "bankId": "SBIN",
                  "bankName": "State Bank Of India",
                  "bankShortName": "SBI",
                  "available": "AVAILABLE",
                  "accountConstraintSupported": false,
                  "priority": 0
                }
              ],
              "topBanks": null,
              "ttl": null
            }
          }
        }"""
        merchant_id = "asd"
        include_net_banking_banks_list = True
        transaction_client = PaymentTransactionClient(api_request_maker=ApiRequestor(host_url=get_pg_url(Env.UAT)),
                                                      merchant_config=MerchantConfig(merchant_id, "salt_key", 1))

        payment_option_url = get_pg_url(Env.UAT) + PAYMENT_OPTIONS_API.format(merchant_id=merchant_id) +\
                             f"?{PAYMENT_OPTIONS_PATH_PARAM}={include_net_banking_banks_list}"
        responses.add(responses.GET, payment_option_url, status=200, json=json.loads(response_string))
        response_object = transaction_client.payment_options(
            include_net_banking_banks_list=include_net_banking_banks_list)

        assert len(responses.calls) == 1
        assert responses.assert_call_count(payment_option_url, 1) is True
        assert json.loads(response_object.to_json()) == json.loads(response_string)

    @responses.activate
    def test_success_not_include_bank_list(self):
        response_string = """{
          "code": "SUCCESS",
          "data": {
            "cards": {
              "enabled": true
            },
            "intent": {
              "apps": null,
              "enabled": true
            },
            "netBanking": {
              "allBanks": null,
              "enabled": true,
              "popularBanks": null,
              "topBanks": null,
              "ttl": null
            },
            "upiCollect": {
              "apps": null,
              "enabled": true
            }
          },
          "message": "Your request has been successfully completed.",
          "success": true
        }"""
        merchant_id = "asd"
        include_net_banking_banks_list = False
        transaction_client = PaymentTransactionClient(api_request_maker=ApiRequestor(host_url=get_pg_url(Env.UAT)),
                                                      merchant_config=MerchantConfig(merchant_id, "salt_key", 1))

        payment_option_url = get_pg_url(Env.UAT) + PAYMENT_OPTIONS_API.format(merchant_id=merchant_id) +\
                             f"?{PAYMENT_OPTIONS_PATH_PARAM}={include_net_banking_banks_list}"
        responses.add(responses.GET, payment_option_url, status=200, json=json.loads(response_string))
        response_object = transaction_client.payment_options(
            include_net_banking_banks_list=include_net_banking_banks_list)

        assert len(responses.calls) == 1
        assert responses.assert_call_count(payment_option_url, 1) is True
        assert json.loads(response_object.to_json()) == json.loads(response_string)
