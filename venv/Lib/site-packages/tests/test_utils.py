from unittest import TestCase

from phonepe.sdk.pg.common.utils.checksum_utils import generate_headers, encode_request_body
from phonepe.sdk.pg.common.utils.general_utils import merge_dict
from phonepe.sdk.pg.payments.payment_constants import REFUND_API


class TestUtils(TestCase):
    def test_merge_dict(self):
        # both none
        result = merge_dict(None, None)
        assert result == {}

        # one of them is none
        dict_with_vals = {"a": 1, "b": 2}
        result = merge_dict(None, dict_with_vals)
        assert result == dict_with_vals
        result = merge_dict(dict_with_vals, None)
        assert result == dict_with_vals

        # same copy
        result = merge_dict(dict_with_vals, dict_with_vals)
        assert result == dict_with_vals

        # diff vals
        dict_with_diff_vals = {"c": 3, "d": 4}
        expected_result = {"a": 1, "b": 2, "c": 3, "d": 4}
        result = merge_dict(dict_with_vals, dict_with_diff_vals)
        assert result == expected_result

        # overlapping vals
        dict_with_overlapping_vals = {"b": -1, "c": 3}
        expected_result = {"a": 1, "b": -1, "c": 3}
        result = merge_dict(dict_with_vals, dict_with_overlapping_vals)
        assert result == expected_result

        dict_with_none = {"val1": None}
        dict_without_none = {"val1": "asd"}
        result = merge_dict(dict_with_none, dict_without_none)
        assert result == {"val1": "asd"}
        result = merge_dict(dict_without_none, dict_with_none)
        assert result == {"val1": "asd"}

    def test_generate_standard_headers(self):
        # Empty data
        body = {}
        url = ''
        salt_key = ''
        salt_index = 0
        expected_headers = {'Content-Type': 'application/json', 'Accept': 'application/json',
                            'x-verify': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855###0'}

        result = generate_headers(body, url, salt_key, salt_index)
        assert result == expected_headers

        # Non-empty data
        body = {"key": "value"}
        url = 'https://example.com/api'
        salt_key = 'abc'
        salt_index = 1
        expected_headers = {'Content-Type': 'application/json', 'Accept': 'application/json',
                            'x-verify': 'a0f7493ab6541c78c8c1b8da7fc02e2103862c3b427484db10cf4064021c01cb###1'}
        result = generate_headers(body, url, salt_key, salt_index)
        assert result == expected_headers

    def test_generate_checksum_request_body(self):
        # Empty data
        body = {}
        expected_result = '{"request": ""}'
        result = encode_request_body(body)
        assert result == expected_result

        # Non-empty data
        body = {"key": "value", "id": 123}
        expected_result = '{"request": "eyJrZXkiOiAidmFsdWUiLCAiaWQiOiAxMjN9"}'
        result = encode_request_body(body)
        assert result == expected_result

    def test_refund_header(self):
        body = {"merchantId": "Phonepe", "subMerchantId": None, "merchantTransactionId": "123123",
                "merchantUserId": None, "amount": 100, "originalTransactionId": "DAV_1680700536894",
                "callbackUrl": None, "feesReversalContext": None}
        expected_result = '{"request": "eyJtZXJjaGFudElkIjogIlBob25lcGUiLCAic3ViTWVyY2hhbnRJZCI6IG51bGwsICJtZXJjaGFudFRyYW5zYWN0aW9uSWQiOiAiMTIzMTIzIiwgIm1lcmNoYW50VXNlcklkIjogbnVsbCwgImFtb3VudCI6IDEwMCwgIm9yaWdpbmFsVHJhbnNhY3Rpb25JZCI6ICJEQVZfMTY4MDcwMDUzNjg5NCIsICJjYWxsYmFja1VybCI6IG51bGwsICJmZWVzUmV2ZXJzYWxDb250ZXh0IjogbnVsbH0="}'
        result = encode_request_body(body)
        assert result == expected_result

    def test_refund_body(self):
        salt_key = "f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454"
        salt_index = 1
        body = {"merchantId": "PhonePe", "subMerchantId": None, "merchantTransactionId": "123123",
                "merchantUserId": None, "amount": 100, "originalTransactionId": "DAV_1680700536894",
                "callbackUrl": None, "feesReversalContext": None}
        expected_result = {'Content-Type': 'application/json', 'Accept': 'application/json',
                           'x-verify': '68cbffc486bff0df3622a9e17b9fdfb2984eea8be562f5ed780f9041c1e95a6c###1'}
        result = generate_headers(body, REFUND_API, salt_key, salt_index)
        assert result == expected_result
