from unittest import TestCase

from phonepe.sdk.pg.payments.payment_instrument_factory import PaymentInstrumentBuilder


class TestInstrumentFactory(TestCase):

    def test_build_account_payment_instrument(self):
        instrument = PaymentInstrumentBuilder.build_upi_collect_payment_instrument("vpa")
        assert instrument.to_dict() == {'type': 'UPI_COLLECT', 'vpa': 'vpa'}

    def test_build_intent_payment_instrument(self):
        instrument = PaymentInstrumentBuilder.build_upi_intent_payment_instrument("target_app")
        assert instrument.to_dict() == {'targetApp': 'target_app', 'type': 'UPI_INTENT'}

    def test_build_upi_qr_payment_instrument(self):
        instrument = PaymentInstrumentBuilder.build_upi_qr_payment_instrument()
        assert instrument.to_dict() == {'type': 'UPI_QR'}

    def test_build_saved_card_payment_instrument(self):
        instrument = PaymentInstrumentBuilder.build_saved_card_payment_instrument("3DS", "card_id", "cvv", 1)
        assert instrument.to_dict() == {'authMode': '3DS', 'cardDetails': {'cardId': 'card_id', 'encryptedCvv': 'cvv',
                                                                           'encryptionKeyId': 1}, 'type': 'SAVED_CARD'}

    def test_build_card_payment_instrument(self):
        instrument = PaymentInstrumentBuilder.build_card_payment_instrument("3DS", True, "123", 2, "name", "12", "2022",
                                                                            "122")
        assert instrument.to_dict() == {'authMode': '3DS', 'cardDetails': {
            'billingAddress': {'city': None, 'country': None, 'line1': None, 'line2': None, 'state': None, 'zip': None},
            'cardHolderName': 'name', 'encryptedCardNumber': '123', 'encryptedCvv': '122', 'encryptionKeyId': 2,
            'expiry': {'month': '12', 'year': '2022'}}, 'saveCard': True, 'type': 'CARD'}

        instrument = PaymentInstrumentBuilder.build_card_payment_instrument("3DS", True, "123", 2, "name", "12", "2022",
                                                                            "122", "line1", "line2", "city", "state",
                                                                            "zip", "country")
        assert instrument.to_dict() == {'authMode': '3DS', 'cardDetails': {
            'billingAddress': {'city': 'city', 'country': 'country', 'line1': 'line1', 'line2': 'line2',
                               'state': 'state', 'zip': 'zip'}, 'cardHolderName': 'name', 'encryptedCardNumber': '123',
            'encryptedCvv': '122', 'encryptionKeyId': 2, 'expiry': {'month': '12', 'year': '2022'}}, 'saveCard': True,
                                        'type': 'CARD'}

    def test_build_token_payment_instrument(self):
        instrument = PaymentInstrumentBuilder.build_token_payment_instrument("3DS", "cvv", "cryptogram", "token", 1,
                                                                             "12", "2001", "suffix", "name")
        assert instrument.to_dict() == {'authMode': '3DS',
                                        'tokenDetails': {'cardHolderName': 'name', 'cryptogram': 'cryptogram',
                                                         'encryptedCvv': 'cvv', 'encryptedToken': 'token',
                                                         'encryptionKeyId': 1,
                                                         'expiry': {'month': '12', 'year': '2001'},
                                                         'panSuffix': 'suffix'}, "type": "TOKEN"}

    def test_build_pay_page_payment_instrument(self):
        instrument = PaymentInstrumentBuilder.build_pay_page_payment_instrument()
        assert instrument.to_dict() == {'type': 'PAY_PAGE'}

    def test_build_net_banking_payment_instrument(self):
        instrument = PaymentInstrumentBuilder.build_net_banking_payment_instrument(bank_id="bank_id")
        assert instrument.to_dict() == {'bankId': 'bank_id', 'type': 'NET_BANKING'}
