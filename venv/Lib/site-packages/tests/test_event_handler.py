from unittest import TestCase
from phonepe.sdk.pg.common.configs.merchant_config import MerchantConfig
from phonepe.sdk.pg.common.events.publisher.event_publisher import EventPublisher
from phonepe.sdk.pg.common.events.event_queue_handler import EventQueueHandler
from phonepe.sdk.pg.common.http_client_modules.api_requestor import ApiRequestor
from phonepe.sdk.pg.common.events.models.base_event import BaseEvent
from phonepe.sdk.pg.common.events.models.enums.event_state import EventState
from phonepe.sdk.pg.common.events.models.enums.event_type import EventType
from phonepe.sdk.pg.common.events.models.enums.flow_type import FlowType


class TestEventPublisher(TestCase):
    def test_event_batch_maker_max_num_events_in_batch(self):
        merchant_config = MerchantConfig(merchant_id="merchant_id", salt_index=1, salt_key="ABCD")
        event_sender = ApiRequestor(host_url="")
        queue_handler = EventQueueHandler()
        queue_handler.clear_queue()
        event_handler = EventPublisher(merchant_config=merchant_config, queue_handler=queue_handler,
                                       event_sender=event_sender)
        events_pushed = 20
        event_handler.queue_handler.clear_queue()
        for event_id in range(events_pushed):
            event_handler.push_event(BaseEvent(event_state=EventState.INIT, event_type=EventType.STATUS_CHECK,
                                               flow_type=FlowType.B2B_PG, host_name="test", time="1", id=str(event_id)))

        batches = event_handler.create_event_batches(max_events_in_batch=100)
        assert len(batches) == max(1, events_pushed // 100)
        for batch in batches:
            assert len(batch) == min(events_pushed, 100)

    def test_event_batch_divides_equally(self):
        merchant_config = MerchantConfig(merchant_id="merchant_id", salt_index=1, salt_key="ABCD")
        event_sender = ApiRequestor(host_url="")
        queue_handler = EventQueueHandler()
        queue_handler.clear_queue()
        event_handler = EventPublisher(merchant_config=merchant_config, queue_handler=queue_handler,
                                       event_sender=event_sender)
        events_pushed = 20
        event_handler.queue_handler.clear_queue()
        for event_id in range(events_pushed):
            event_handler.push_event(BaseEvent(event_state=EventState.INIT, event_type=EventType.STATUS_CHECK,
                                               flow_type=FlowType.B2B_PG, host_name="test", time="1",
                                               id=str(event_id)))

        batches = event_handler.create_event_batches(max_events_in_batch=2)
        assert len(batches) == max(1, events_pushed // 2)
        for batch in batches:
            assert len(batch) == min(events_pushed, 2)

    def test_event_batch_some_left_over(self):
        merchant_config = MerchantConfig(merchant_id="merchant_id", salt_index=1, salt_key="ABCD")
        event_sender = ApiRequestor(host_url="")
        queue_handler = EventQueueHandler()
        queue_handler.clear_queue()
        event_handler = EventPublisher(merchant_config=merchant_config, queue_handler=queue_handler,
                                       event_sender=event_sender)
        max_events_in_batch = 5
        split_over_events = 3
        events_pushed = 4 * max_events_in_batch + split_over_events
        event_handler.queue_handler.clear_queue()
        for event_id in range(events_pushed):
            event_handler.push_event(BaseEvent(event_state=EventState.INIT, event_type=EventType.STATUS_CHECK,
                                               flow_type=FlowType.B2B_PG, host_name="test", time="1",
                                               id=str(event_id)))

        batches = event_handler.create_event_batches(max_events_in_batch=max_events_in_batch)
        assert len(batches) == max(1, (events_pushed // max_events_in_batch) +
                                   max(1, split_over_events//max_events_in_batch))
        for batch in batches[:-1]:
            assert len(batch) == min(events_pushed, 5)
        assert len(batches[-1]) == split_over_events

