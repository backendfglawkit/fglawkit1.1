import json
from unittest import TestCase

import responses

from phonepe.sdk.pg.common.configs.config_handler import get_pg_url
from phonepe.sdk.pg.common.configs.merchant_config import MerchantConfig
from phonepe.sdk.pg.env import Env
from phonepe.sdk.pg.common.exceptions import BadRequest
from phonepe.sdk.pg.common.http_client_modules.api_requestor import ApiRequestor
from phonepe.sdk.pg.payments.models.response_v1.phonepe_response import PhonePeResponse
from phonepe.sdk.pg.payments.payment_constants import STATUS_API
from phonepe.sdk.pg.payments.payment_transaction_client import PaymentTransactionClient


class CheckStatusTest(TestCase):
    @responses.activate
    def test_check_status_success(self):
        merchant_id = "merchant_id"
        merchant_transaction_id = "merchant_transaction_id"

        # prepare expected request
        check_status_url = get_pg_url(Env.UAT) + STATUS_API.format(merchant_id=merchant_id,
                                                                               merchant_transaction_id=merchant_transaction_id)
        response_string = """{
          "success": true,
          "code": "PAYMENT_PENDING",
          "message": "Your request is in pending state.",
          "data": {
            "merchantId": "merchant_id",
            "merchantTransactionId": "merchant_transaction_id",
            "transactionId": null,
            "amount": 10,
            "state": "PENDING",
            "responseCode": null,
            "paymentInstrument": null
          }
        }"""
        transaction_client = PaymentTransactionClient(api_request_maker=ApiRequestor(host_url=get_pg_url(Env.UAT)),
                                                      merchant_config=MerchantConfig(merchant_id, "salt_key", 1))

        responses.add(responses.GET, check_status_url, status=200, body="", json=json.loads(response_string))
        response_object = transaction_client.check_status(merchant_transaction_id=merchant_transaction_id)
        assert len(responses.calls) == 1
        assert responses.assert_call_count(check_status_url, 1) is True
        assert json.loads(response_object.to_json()) == json.loads(response_string)

    @responses.activate
    def test_check_status_failure_bad_request(self):
        merchant_id = "merchant_id"
        merchant_transaction_id = "merchant_transaction_id"

        # prepare expected request
        check_status_url = get_pg_url(Env.UAT) + STATUS_API.format(merchant_id=merchant_id,
                                                                               merchant_transaction_id=merchant_transaction_id)
        transaction_client = PaymentTransactionClient(api_request_maker=ApiRequestor(host_url=get_pg_url(Env.UAT)),
                                                      merchant_config=MerchantConfig(merchant_id, "salt_key", 1))

        responses.add(responses.GET, check_status_url, status=400, body="", json={"message": "INVALID_MERCHANT_ID"})
        with self.assertRaises(BadRequest) as exception_raises_context:
            transaction_client.check_status(merchant_transaction_id)

        exception = exception_raises_context.exception
        assert exception.code == 400
        assert exception.message == "Bad Request"
        assert exception.phonepe_response == PhonePeResponse(message="INVALID_MERCHANT_ID")

    @responses.activate
    def test_check_status_internal_server_error(self):
        merchant_id = "merchant_id"
        merchant_transaction_id = "merchant_transaction_id"

        # prepare expected request
        check_status_url = get_pg_url(Env.UAT) + STATUS_API.format(merchant_id=merchant_id,
                                                                               merchant_transaction_id=merchant_transaction_id)
        response_string = """{
            "success": false,
            "code": "INTERNAL_SERVER_ERROR",
            "data": null,
            "message": "There is an error trying to process your transaction at the moment. Please try again in a while."
        }"""
        transaction_client = PaymentTransactionClient(api_request_maker=ApiRequestor(host_url=get_pg_url(Env.UAT)),
                                                      merchant_config=MerchantConfig(merchant_id, "salt_key", 1))

        responses.add(responses.GET, check_status_url, status=200, body="", json=json.loads(response_string))
        response_object = transaction_client.check_status(merchant_transaction_id=merchant_transaction_id)
        assert len(responses.calls) == 1
        assert responses.assert_call_count(check_status_url, 1) is True
        assert json.loads(response_object.to_json()) == json.loads(response_string)
