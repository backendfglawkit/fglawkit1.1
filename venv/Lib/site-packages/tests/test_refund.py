import json
from unittest import TestCase

import responses

from phonepe.sdk.pg.common.configs.config_handler import get_pg_url
from phonepe.sdk.pg.common.configs.merchant_config import MerchantConfig
from phonepe.sdk.pg.env import Env
from phonepe.sdk.pg.common.http_client_modules.api_requestor import ApiRequestor
from phonepe.sdk.pg.payments.payment_constants import REFUND_API
from phonepe.sdk.pg.payments.payment_transaction_client import PaymentTransactionClient


class TestRefund(TestCase):

    @responses.activate
    def test_refund_success(self):
        merchant_id = "merchant_id"
        transaction_client = PaymentTransactionClient(api_request_maker=ApiRequestor(host_url=get_pg_url(Env.UAT)),
                                                      merchant_config=MerchantConfig(merchant_id, "salt_key", 1))
        refund_url = get_pg_url(Env.UAT) + REFUND_API
        response_data = """{
          "success": true,
          "code": "PAYMENT_PENDING",
          "message": "Your request has been successfully completed.",
          "data": {
            "merchantId": "MERCHANTUAT",
            "merchantTransactionId": "ROD620471739210623",
            "transactionId": "TR620471739210623",
            "amount": 10000,
            "state": "PENDING",
            "responseCode": "PAYMENT_PENDING"
          }
        }"""
        responses.add(responses.POST, refund_url, status=200, json=json.loads(response_data))

        response_object = transaction_client.refund({})

        assert len(responses.calls) == 1
        assert responses.assert_call_count(refund_url, 1) is True
        assert json.loads(response_data) == response_object.to_dict()

    @responses.activate
    def test_refund_failure(self):
        merchant_id = "merchant_id"
        transaction_client = PaymentTransactionClient(api_request_maker=ApiRequestor(host_url=get_pg_url(Env.UAT)),
                                                      merchant_config=MerchantConfig(merchant_id, "salt_key", 1))
        refund_url = get_pg_url(Env.UAT) + REFUND_API
        response_data = """{
            "success": false,
            "code": "INTERNAL_SERVER_ERROR",
            "message": "There is an error trying to process your transaction at the moment.Please try again in a while.",
            "data": null
        }"""
        responses.add(responses.POST, refund_url, status=200, json=json.loads(response_data))

        response_object = transaction_client.refund({})

        assert len(responses.calls) == 1
        assert responses.assert_call_count(refund_url, 1) is True
        assert json.loads(response_data) == response_object.to_dict()
